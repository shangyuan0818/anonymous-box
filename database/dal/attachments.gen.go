// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/star-horizon/anonymous-box-saas/database/model"
)

func newAttachment(db *gorm.DB, opts ...gen.DOOption) attachment {
	_attachment := attachment{}

	_attachment.attachmentDo.UseDB(db, opts...)
	_attachment.attachmentDo.UseModel(&model.Attachment{})

	tableName := _attachment.attachmentDo.TableName()
	_attachment.ALL = field.NewAsterisk(tableName)
	_attachment.ID = field.NewUint64(tableName, "id")
	_attachment.CreatedAt = field.NewTime(tableName, "created_at")
	_attachment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_attachment.DeletedAt = field.NewField(tableName, "deleted_at")
	_attachment.StorageID = field.NewUint64(tableName, "storage_id")
	_attachment.FilePath = field.NewString(tableName, "file_path")
	_attachment.UploaderIP = field.NewString(tableName, "uploader_ip")
	_attachment.FileName = field.NewString(tableName, "file_name")
	_attachment.FileSize = field.NewInt64(tableName, "file_size")
	_attachment.FileContentType = field.NewString(tableName, "file_content_type")
	_attachment.FileSha256Sum = field.NewString(tableName, "file_sha256_sum")

	_attachment.fillFieldMap()

	return _attachment
}

type attachment struct {
	attachmentDo attachmentDo

	ALL             field.Asterisk
	ID              field.Uint64
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	StorageID       field.Uint64
	FilePath        field.String
	UploaderIP      field.String
	FileName        field.String
	FileSize        field.Int64
	FileContentType field.String
	FileSha256Sum   field.String

	fieldMap map[string]field.Expr
}

func (a attachment) Table(newTableName string) *attachment {
	a.attachmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attachment) As(alias string) *attachment {
	a.attachmentDo.DO = *(a.attachmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attachment) updateTableName(table string) *attachment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.StorageID = field.NewUint64(table, "storage_id")
	a.FilePath = field.NewString(table, "file_path")
	a.UploaderIP = field.NewString(table, "uploader_ip")
	a.FileName = field.NewString(table, "file_name")
	a.FileSize = field.NewInt64(table, "file_size")
	a.FileContentType = field.NewString(table, "file_content_type")
	a.FileSha256Sum = field.NewString(table, "file_sha256_sum")

	a.fillFieldMap()

	return a
}

func (a *attachment) WithContext(ctx context.Context) IAttachmentDo {
	return a.attachmentDo.WithContext(ctx)
}

func (a attachment) TableName() string { return a.attachmentDo.TableName() }

func (a attachment) Alias() string { return a.attachmentDo.Alias() }

func (a *attachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attachment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["storage_id"] = a.StorageID
	a.fieldMap["file_path"] = a.FilePath
	a.fieldMap["uploader_ip"] = a.UploaderIP
	a.fieldMap["file_name"] = a.FileName
	a.fieldMap["file_size"] = a.FileSize
	a.fieldMap["file_content_type"] = a.FileContentType
	a.fieldMap["file_sha256_sum"] = a.FileSha256Sum
}

func (a attachment) clone(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attachment) replaceDB(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceDB(db)
	return a
}

type attachmentDo struct{ gen.DO }

type IAttachmentDo interface {
	gen.SubQuery
	Debug() IAttachmentDo
	WithContext(ctx context.Context) IAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttachmentDo
	WriteDB() IAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttachmentDo
	Not(conds ...gen.Condition) IAttachmentDo
	Or(conds ...gen.Condition) IAttachmentDo
	Select(conds ...field.Expr) IAttachmentDo
	Where(conds ...gen.Condition) IAttachmentDo
	Order(conds ...field.Expr) IAttachmentDo
	Distinct(cols ...field.Expr) IAttachmentDo
	Omit(cols ...field.Expr) IAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	Group(cols ...field.Expr) IAttachmentDo
	Having(conds ...gen.Condition) IAttachmentDo
	Limit(limit int) IAttachmentDo
	Offset(offset int) IAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo
	Unscoped() IAttachmentDo
	Create(values ...*model.Attachment) error
	CreateInBatches(values []*model.Attachment, batchSize int) error
	Save(values ...*model.Attachment) error
	First() (*model.Attachment, error)
	Take() (*model.Attachment, error)
	Last() (*model.Attachment, error)
	Find() ([]*model.Attachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attachment, err error)
	FindInBatches(result *[]*model.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Attachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttachmentDo
	Assign(attrs ...field.AssignExpr) IAttachmentDo
	Joins(fields ...field.RelationField) IAttachmentDo
	Preload(fields ...field.RelationField) IAttachmentDo
	FirstOrInit() (*model.Attachment, error)
	FirstOrCreate() (*model.Attachment, error)
	FindByPage(offset int, limit int) (result []*model.Attachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attachmentDo) Debug() IAttachmentDo {
	return a.withDO(a.DO.Debug())
}

func (a attachmentDo) WithContext(ctx context.Context) IAttachmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attachmentDo) ReadDB() IAttachmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a attachmentDo) WriteDB() IAttachmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a attachmentDo) Session(config *gorm.Session) IAttachmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a attachmentDo) Clauses(conds ...clause.Expression) IAttachmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attachmentDo) Returning(value interface{}, columns ...string) IAttachmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attachmentDo) Not(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attachmentDo) Or(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attachmentDo) Select(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attachmentDo) Where(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attachmentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAttachmentDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a attachmentDo) Order(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attachmentDo) Distinct(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attachmentDo) Omit(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attachmentDo) Join(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attachmentDo) Group(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attachmentDo) Having(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attachmentDo) Limit(limit int) IAttachmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attachmentDo) Offset(offset int) IAttachmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attachmentDo) Unscoped() IAttachmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attachmentDo) Create(values ...*model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attachmentDo) CreateInBatches(values []*model.Attachment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attachmentDo) Save(values ...*model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attachmentDo) First() (*model.Attachment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Take() (*model.Attachment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Last() (*model.Attachment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Find() ([]*model.Attachment, error) {
	result, err := a.DO.Find()
	return result.([]*model.Attachment), err
}

func (a attachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attachment, err error) {
	buf := make([]*model.Attachment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attachmentDo) FindInBatches(result *[]*model.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attachmentDo) Attrs(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attachmentDo) Assign(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attachmentDo) Joins(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attachmentDo) Preload(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attachmentDo) FirstOrInit() (*model.Attachment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) FirstOrCreate() (*model.Attachment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) FindByPage(offset int, limit int) (result []*model.Attachment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attachmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attachmentDo) Delete(models ...*model.Attachment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attachmentDo) withDO(do gen.Dao) *attachmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
