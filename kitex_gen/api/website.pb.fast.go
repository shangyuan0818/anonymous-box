// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "github.com/star-horizon/anonymous-box-saas/kitex_gen/base"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateWebsiteRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateWebsiteRequest[number], err)
}

func (x *CreateWebsiteRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *CreateWebsiteRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateWebsiteRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateWebsiteRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AvatarIcon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateWebsiteRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Background, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateWebsiteRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Language, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateWebsiteRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.IsPublic, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateWebsiteRequest) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.AllowAnonymous, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateWebsiteResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateWebsiteResponse[number], err)
}

func (x *CreateWebsiteResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *CreateWebsiteResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetWebsiteRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetWebsiteRequest[number], err)
}

func (x *GetWebsiteRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetWebsiteRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetWebsiteResponse[number], err)
}

func (x *GetWebsiteResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.AvatarIcon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Background, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Language, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.IsPublic, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetWebsiteResponse) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.AllowAnonymous, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateWebsiteRequest[number], err)
}

func (x *UpdateWebsiteRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.AvatarIcon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Background, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Language, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.IsPublic, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateWebsiteRequest) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.AllowAnonymous, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ListWebsitesRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListWebsitesRequest[number], err)
}

func (x *ListWebsitesRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ListWebsitesRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v base.Pagination
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Pagination = &v
	return offset, nil
}

func (x *ListWebsitesResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListWebsitesResponse[number], err)
}

func (x *ListWebsitesResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadSint64(buf, _type)
	return offset, err
}

func (x *ListWebsitesResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v GetWebsiteResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Websites = append(x.Websites, &v)
	return offset, nil
}

func (x *CreateWebsiteRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField4(buf []byte) (offset int) {
	if x.AvatarIcon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAvatarIcon())
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Background == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetBackground())
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField6(buf []byte) (offset int) {
	if x.Language == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetLanguage())
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField7(buf []byte) (offset int) {
	if !x.IsPublic {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.GetIsPublic())
	return offset
}

func (x *CreateWebsiteRequest) fastWriteField8(buf []byte) (offset int) {
	if !x.AllowAnonymous {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetAllowAnonymous())
	return offset
}

func (x *CreateWebsiteResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateWebsiteResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *CreateWebsiteResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *GetWebsiteRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetWebsiteRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetWebsiteRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetId())
	return offset
}

func (x *GetWebsiteResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *GetWebsiteResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField5(buf []byte) (offset int) {
	if x.AvatarIcon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetAvatarIcon())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField6(buf []byte) (offset int) {
	if x.Background == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetBackground())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField7(buf []byte) (offset int) {
	if x.Language == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetLanguage())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField8(buf []byte) (offset int) {
	if !x.IsPublic {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetIsPublic())
	return offset
}

func (x *GetWebsiteResponse) fastWriteField9(buf []byte) (offset int) {
	if !x.AllowAnonymous {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetAllowAnonymous())
	return offset
}

func (x *UpdateWebsiteRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetId())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetKey())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDescription())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField6(buf []byte) (offset int) {
	if x.AvatarIcon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetAvatarIcon())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField7(buf []byte) (offset int) {
	if x.Background == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetBackground())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField8(buf []byte) (offset int) {
	if x.Language == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetLanguage())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField9(buf []byte) (offset int) {
	if !x.IsPublic {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetIsPublic())
	return offset
}

func (x *UpdateWebsiteRequest) fastWriteField10(buf []byte) (offset int) {
	if !x.AllowAnonymous {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 10, x.GetAllowAnonymous())
	return offset
}

func (x *ListWebsitesRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListWebsitesRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *ListWebsitesRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Pagination == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPagination())
	return offset
}

func (x *ListWebsitesResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListWebsitesResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteSint64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *ListWebsitesResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Websites == nil {
		return offset
	}
	for i := range x.GetWebsites() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetWebsites()[i])
	}
	return offset
}

func (x *CreateWebsiteRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *CreateWebsiteRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetUserId())
	return n
}

func (x *CreateWebsiteRequest) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *CreateWebsiteRequest) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *CreateWebsiteRequest) sizeField4() (n int) {
	if x.AvatarIcon == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAvatarIcon())
	return n
}

func (x *CreateWebsiteRequest) sizeField5() (n int) {
	if x.Background == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetBackground())
	return n
}

func (x *CreateWebsiteRequest) sizeField6() (n int) {
	if x.Language == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetLanguage())
	return n
}

func (x *CreateWebsiteRequest) sizeField7() (n int) {
	if !x.IsPublic {
		return n
	}
	n += fastpb.SizeBool(7, x.GetIsPublic())
	return n
}

func (x *CreateWebsiteRequest) sizeField8() (n int) {
	if !x.AllowAnonymous {
		return n
	}
	n += fastpb.SizeBool(8, x.GetAllowAnonymous())
	return n
}

func (x *CreateWebsiteResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateWebsiteResponse) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *CreateWebsiteResponse) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

func (x *GetWebsiteRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetWebsiteRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetUserId())
	return n
}

func (x *GetWebsiteRequest) sizeField2() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetId())
	return n
}

func (x *GetWebsiteResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *GetWebsiteResponse) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *GetWebsiteResponse) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

func (x *GetWebsiteResponse) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *GetWebsiteResponse) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *GetWebsiteResponse) sizeField5() (n int) {
	if x.AvatarIcon == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetAvatarIcon())
	return n
}

func (x *GetWebsiteResponse) sizeField6() (n int) {
	if x.Background == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetBackground())
	return n
}

func (x *GetWebsiteResponse) sizeField7() (n int) {
	if x.Language == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetLanguage())
	return n
}

func (x *GetWebsiteResponse) sizeField8() (n int) {
	if !x.IsPublic {
		return n
	}
	n += fastpb.SizeBool(8, x.GetIsPublic())
	return n
}

func (x *GetWebsiteResponse) sizeField9() (n int) {
	if !x.AllowAnonymous {
		return n
	}
	n += fastpb.SizeBool(9, x.GetAllowAnonymous())
	return n
}

func (x *UpdateWebsiteRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *UpdateWebsiteRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetUserId())
	return n
}

func (x *UpdateWebsiteRequest) sizeField2() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetId())
	return n
}

func (x *UpdateWebsiteRequest) sizeField3() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetKey())
	return n
}

func (x *UpdateWebsiteRequest) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *UpdateWebsiteRequest) sizeField5() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDescription())
	return n
}

func (x *UpdateWebsiteRequest) sizeField6() (n int) {
	if x.AvatarIcon == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetAvatarIcon())
	return n
}

func (x *UpdateWebsiteRequest) sizeField7() (n int) {
	if x.Background == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetBackground())
	return n
}

func (x *UpdateWebsiteRequest) sizeField8() (n int) {
	if x.Language == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetLanguage())
	return n
}

func (x *UpdateWebsiteRequest) sizeField9() (n int) {
	if !x.IsPublic {
		return n
	}
	n += fastpb.SizeBool(9, x.GetIsPublic())
	return n
}

func (x *UpdateWebsiteRequest) sizeField10() (n int) {
	if !x.AllowAnonymous {
		return n
	}
	n += fastpb.SizeBool(10, x.GetAllowAnonymous())
	return n
}

func (x *ListWebsitesRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListWebsitesRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetUserId())
	return n
}

func (x *ListWebsitesRequest) sizeField2() (n int) {
	if x.Pagination == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPagination())
	return n
}

func (x *ListWebsitesResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListWebsitesResponse) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeSint64(1, x.GetTotal())
	return n
}

func (x *ListWebsitesResponse) sizeField2() (n int) {
	if x.Websites == nil {
		return n
	}
	for i := range x.GetWebsites() {
		n += fastpb.SizeMessage(2, x.GetWebsites()[i])
	}
	return n
}

var fieldIDToName_CreateWebsiteRequest = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Description",
	4: "AvatarIcon",
	5: "Background",
	6: "Language",
	7: "IsPublic",
	8: "AllowAnonymous",
}

var fieldIDToName_CreateWebsiteResponse = map[int32]string{
	1: "Id",
	2: "Key",
}

var fieldIDToName_GetWebsiteRequest = map[int32]string{
	1: "UserId",
	2: "Id",
}

var fieldIDToName_GetWebsiteResponse = map[int32]string{
	1: "Id",
	2: "Key",
	3: "Name",
	4: "Description",
	5: "AvatarIcon",
	6: "Background",
	7: "Language",
	8: "IsPublic",
	9: "AllowAnonymous",
}

var fieldIDToName_UpdateWebsiteRequest = map[int32]string{
	1:  "UserId",
	2:  "Id",
	3:  "Key",
	4:  "Name",
	5:  "Description",
	6:  "AvatarIcon",
	7:  "Background",
	8:  "Language",
	9:  "IsPublic",
	10: "AllowAnonymous",
}

var fieldIDToName_ListWebsitesRequest = map[int32]string{
	1: "UserId",
	2: "Pagination",
}

var fieldIDToName_ListWebsitesResponse = map[int32]string{
	1: "Total",
	2: "Websites",
}

var _ = base.File_idl_base_empty_proto
var _ = base.File_idl_base_pagination_proto
