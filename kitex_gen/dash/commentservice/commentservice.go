// Code generated by Kitex v0.5.1. DO NOT EDIT.

package commentservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	base "github.com/star-horizon/anonymous-box-saas/kitex_gen/base"
	dash "github.com/star-horizon/anonymous-box-saas/kitex_gen/dash"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*dash.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetComment":    kitex.NewMethodInfo(getCommentHandler, newGetCommentArgs, newGetCommentResult, false),
		"ListComments":  kitex.NewMethodInfo(listCommentsHandler, newListCommentsArgs, newListCommentsResult, false),
		"DeleteComment": kitex.NewMethodInfo(deleteCommentHandler, newDeleteCommentArgs, newDeleteCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api.dash",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func getCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.GetCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.CommentService).GetComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentArgs:
		success, err := handler.(dash.CommentService).GetComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentArgs() interface{} {
	return &GetCommentArgs{}
}

func newGetCommentResult() interface{} {
	return &GetCommentResult{}
}

type GetCommentArgs struct {
	Req *dash.GetCommentRequest
}

func (p *GetCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.GetCommentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentArgs) Unmarshal(in []byte) error {
	msg := new(dash.GetCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentArgs_Req_DEFAULT *dash.GetCommentRequest

func (p *GetCommentArgs) GetReq() *dash.GetCommentRequest {
	if !p.IsSetReq() {
		return GetCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentResult struct {
	Success *dash.Comment
}

var GetCommentResult_Success_DEFAULT *dash.Comment

func (p *GetCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.Comment)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentResult) Unmarshal(in []byte) error {
	msg := new(dash.Comment)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentResult) GetSuccess() *dash.Comment {
	if !p.IsSetSuccess() {
		return GetCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.Comment)
}

func (p *GetCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentResult) GetResult() interface{} {
	return p.Success
}

func listCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.ListCommentsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.CommentService).ListComments(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListCommentsArgs:
		success, err := handler.(dash.CommentService).ListComments(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCommentsResult)
		realResult.Success = success
	}
	return nil
}
func newListCommentsArgs() interface{} {
	return &ListCommentsArgs{}
}

func newListCommentsResult() interface{} {
	return &ListCommentsResult{}
}

type ListCommentsArgs struct {
	Req *dash.ListCommentsRequest
}

func (p *ListCommentsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.ListCommentsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCommentsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCommentsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCommentsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListCommentsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListCommentsArgs) Unmarshal(in []byte) error {
	msg := new(dash.ListCommentsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCommentsArgs_Req_DEFAULT *dash.ListCommentsRequest

func (p *ListCommentsArgs) GetReq() *dash.ListCommentsRequest {
	if !p.IsSetReq() {
		return ListCommentsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCommentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListCommentsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListCommentsResult struct {
	Success *dash.ListCommentsResponse
}

var ListCommentsResult_Success_DEFAULT *dash.ListCommentsResponse

func (p *ListCommentsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.ListCommentsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCommentsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCommentsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCommentsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListCommentsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListCommentsResult) Unmarshal(in []byte) error {
	msg := new(dash.ListCommentsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCommentsResult) GetSuccess() *dash.ListCommentsResponse {
	if !p.IsSetSuccess() {
		return ListCommentsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCommentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.ListCommentsResponse)
}

func (p *ListCommentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListCommentsResult) GetResult() interface{} {
	return p.Success
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.DeleteCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.CommentService).DeleteComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentArgs:
		success, err := handler.(dash.CommentService).DeleteComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentArgs() interface{} {
	return &DeleteCommentArgs{}
}

func newDeleteCommentResult() interface{} {
	return &DeleteCommentResult{}
}

type DeleteCommentArgs struct {
	Req *dash.DeleteCommentRequest
}

func (p *DeleteCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.DeleteCommentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentArgs) Unmarshal(in []byte) error {
	msg := new(dash.DeleteCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentArgs_Req_DEFAULT *dash.DeleteCommentRequest

func (p *DeleteCommentArgs) GetReq() *dash.DeleteCommentRequest {
	if !p.IsSetReq() {
		return DeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommentResult struct {
	Success *base.Empty
}

var DeleteCommentResult_Success_DEFAULT *base.Empty

func (p *DeleteCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(base.Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentResult) Unmarshal(in []byte) error {
	msg := new(base.Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentResult) GetSuccess() *base.Empty {
	if !p.IsSetSuccess() {
		return DeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

func (p *DeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommentResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetComment(ctx context.Context, Req *dash.GetCommentRequest) (r *dash.Comment, err error) {
	var _args GetCommentArgs
	_args.Req = Req
	var _result GetCommentResult
	if err = p.c.Call(ctx, "GetComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListComments(ctx context.Context, Req *dash.ListCommentsRequest) (r *dash.ListCommentsResponse, err error) {
	var _args ListCommentsArgs
	_args.Req = Req
	var _result ListCommentsResult
	if err = p.c.Call(ctx, "ListComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, Req *dash.DeleteCommentRequest) (r *base.Empty, err error) {
	var _args DeleteCommentArgs
	_args.Req = Req
	var _result DeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
