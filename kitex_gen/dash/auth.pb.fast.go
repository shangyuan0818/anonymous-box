// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package dash

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "github.com/star-horizon/anonymous-box-saas/kitex_gen/base"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *LoginRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginRequest[number], err)
}

func (x *LoginRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Credential, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterRequest[number], err)
}

func (x *RegisterRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.VerificationCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FirstName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.LastName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Location, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Bio, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChangePasswordRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChangePasswordRequest[number], err)
}

func (x *ChangePasswordRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChangePasswordRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.OldPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChangePasswordRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ResetPasswordRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ResetPasswordRequest[number], err)
}

func (x *ResetPasswordRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ResetPasswordRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.VerificationCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ResetPasswordRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AuthToken) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AuthToken[number], err)
}

func (x *AuthToken) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ServerAuthDataResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ServerAuthDataResponse[number], err)
}

func (x *ServerAuthDataResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ServerAuthDataResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v base.Timestamp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CreatedAt = &v
	return offset, nil
}

func (x *ServerAuthDataResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v base.Timestamp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UpdatedAt = &v
	return offset, nil
}

func (x *ServerAuthDataResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ServerAuthDataResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LoginRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Credential == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCredential())
	return offset
}

func (x *LoginRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *RegisterRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *RegisterRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *RegisterRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetEmail())
	return offset
}

func (x *RegisterRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *RegisterRequest) fastWriteField4(buf []byte) (offset int) {
	if x.VerificationCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetVerificationCode())
	return offset
}

func (x *RegisterRequest) fastWriteField5(buf []byte) (offset int) {
	if x.FirstName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetFirstName())
	return offset
}

func (x *RegisterRequest) fastWriteField6(buf []byte) (offset int) {
	if x.LastName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetLastName())
	return offset
}

func (x *RegisterRequest) fastWriteField7(buf []byte) (offset int) {
	if x.Location == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetLocation())
	return offset
}

func (x *RegisterRequest) fastWriteField8(buf []byte) (offset int) {
	if x.Bio == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetBio())
	return offset
}

func (x *ChangePasswordRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ChangePasswordRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *ChangePasswordRequest) fastWriteField3(buf []byte) (offset int) {
	if x.OldPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOldPassword())
	return offset
}

func (x *ChangePasswordRequest) fastWriteField4(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetNewPassword())
	return offset
}

func (x *ResetPasswordRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ResetPasswordRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *ResetPasswordRequest) fastWriteField2(buf []byte) (offset int) {
	if x.VerificationCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetVerificationCode())
	return offset
}

func (x *ResetPasswordRequest) fastWriteField3(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNewPassword())
	return offset
}

func (x *AuthToken) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AuthToken) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *ServerAuthDataResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ServerAuthDataResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ServerAuthDataResponse) fastWriteField2(buf []byte) (offset int) {
	if x.CreatedAt == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetCreatedAt())
	return offset
}

func (x *ServerAuthDataResponse) fastWriteField3(buf []byte) (offset int) {
	if x.UpdatedAt == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetUpdatedAt())
	return offset
}

func (x *ServerAuthDataResponse) fastWriteField4(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetUsername())
	return offset
}

func (x *ServerAuthDataResponse) fastWriteField5(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetEmail())
	return offset
}

func (x *LoginRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LoginRequest) sizeField1() (n int) {
	if x.Credential == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCredential())
	return n
}

func (x *LoginRequest) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *RegisterRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *RegisterRequest) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *RegisterRequest) sizeField2() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetEmail())
	return n
}

func (x *RegisterRequest) sizeField3() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *RegisterRequest) sizeField4() (n int) {
	if x.VerificationCode == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetVerificationCode())
	return n
}

func (x *RegisterRequest) sizeField5() (n int) {
	if x.FirstName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetFirstName())
	return n
}

func (x *RegisterRequest) sizeField6() (n int) {
	if x.LastName == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetLastName())
	return n
}

func (x *RegisterRequest) sizeField7() (n int) {
	if x.Location == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetLocation())
	return n
}

func (x *RegisterRequest) sizeField8() (n int) {
	if x.Bio == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetBio())
	return n
}

func (x *ChangePasswordRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ChangePasswordRequest) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *ChangePasswordRequest) sizeField3() (n int) {
	if x.OldPassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetOldPassword())
	return n
}

func (x *ChangePasswordRequest) sizeField4() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetNewPassword())
	return n
}

func (x *ResetPasswordRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ResetPasswordRequest) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *ResetPasswordRequest) sizeField2() (n int) {
	if x.VerificationCode == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetVerificationCode())
	return n
}

func (x *ResetPasswordRequest) sizeField3() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNewPassword())
	return n
}

func (x *AuthToken) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AuthToken) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *ServerAuthDataResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ServerAuthDataResponse) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *ServerAuthDataResponse) sizeField2() (n int) {
	if x.CreatedAt == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetCreatedAt())
	return n
}

func (x *ServerAuthDataResponse) sizeField3() (n int) {
	if x.UpdatedAt == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetUpdatedAt())
	return n
}

func (x *ServerAuthDataResponse) sizeField4() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetUsername())
	return n
}

func (x *ServerAuthDataResponse) sizeField5() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetEmail())
	return n
}

var fieldIDToName_LoginRequest = map[int32]string{
	1: "Credential",
	2: "Password",
}

var fieldIDToName_RegisterRequest = map[int32]string{
	1: "Username",
	2: "Email",
	3: "Password",
	4: "VerificationCode",
	5: "FirstName",
	6: "LastName",
	7: "Location",
	8: "Bio",
}

var fieldIDToName_ChangePasswordRequest = map[int32]string{
	1: "Token",
	3: "OldPassword",
	4: "NewPassword",
}

var fieldIDToName_ResetPasswordRequest = map[int32]string{
	1: "Email",
	2: "VerificationCode",
	3: "NewPassword",
}

var fieldIDToName_AuthToken = map[int32]string{
	1: "Token",
}

var fieldIDToName_ServerAuthDataResponse = map[int32]string{
	1: "Id",
	2: "CreatedAt",
	3: "UpdatedAt",
	4: "Username",
	5: "Email",
}

var _ = base.File_idl_base_timestamp_proto
