// Code generated by Kitex v0.5.1. DO NOT EDIT.

package websiteservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	base "github.com/star-horizon/anonymous-box-saas/kitex_gen/base"
	dash "github.com/star-horizon/anonymous-box-saas/kitex_gen/dash"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return websiteServiceServiceInfo
}

var websiteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "WebsiteService"
	handlerType := (*dash.WebsiteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateWebsite": kitex.NewMethodInfo(createWebsiteHandler, newCreateWebsiteArgs, newCreateWebsiteResult, false),
		"GetWebsite":    kitex.NewMethodInfo(getWebsiteHandler, newGetWebsiteArgs, newGetWebsiteResult, false),
		"UpdateWebsite": kitex.NewMethodInfo(updateWebsiteHandler, newUpdateWebsiteArgs, newUpdateWebsiteResult, false),
		"ListWebsites":  kitex.NewMethodInfo(listWebsitesHandler, newListWebsitesArgs, newListWebsitesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api.dash",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func createWebsiteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.CreateWebsiteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.WebsiteService).CreateWebsite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateWebsiteArgs:
		success, err := handler.(dash.WebsiteService).CreateWebsite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateWebsiteResult)
		realResult.Success = success
	}
	return nil
}
func newCreateWebsiteArgs() interface{} {
	return &CreateWebsiteArgs{}
}

func newCreateWebsiteResult() interface{} {
	return &CreateWebsiteResult{}
}

type CreateWebsiteArgs struct {
	Req *dash.CreateWebsiteRequest
}

func (p *CreateWebsiteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.CreateWebsiteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateWebsiteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateWebsiteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateWebsiteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateWebsiteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateWebsiteArgs) Unmarshal(in []byte) error {
	msg := new(dash.CreateWebsiteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateWebsiteArgs_Req_DEFAULT *dash.CreateWebsiteRequest

func (p *CreateWebsiteArgs) GetReq() *dash.CreateWebsiteRequest {
	if !p.IsSetReq() {
		return CreateWebsiteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateWebsiteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateWebsiteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateWebsiteResult struct {
	Success *dash.CreateWebsiteResponse
}

var CreateWebsiteResult_Success_DEFAULT *dash.CreateWebsiteResponse

func (p *CreateWebsiteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.CreateWebsiteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateWebsiteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateWebsiteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateWebsiteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateWebsiteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateWebsiteResult) Unmarshal(in []byte) error {
	msg := new(dash.CreateWebsiteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateWebsiteResult) GetSuccess() *dash.CreateWebsiteResponse {
	if !p.IsSetSuccess() {
		return CreateWebsiteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateWebsiteResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.CreateWebsiteResponse)
}

func (p *CreateWebsiteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateWebsiteResult) GetResult() interface{} {
	return p.Success
}

func getWebsiteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.GetWebsiteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.WebsiteService).GetWebsite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetWebsiteArgs:
		success, err := handler.(dash.WebsiteService).GetWebsite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetWebsiteResult)
		realResult.Success = success
	}
	return nil
}
func newGetWebsiteArgs() interface{} {
	return &GetWebsiteArgs{}
}

func newGetWebsiteResult() interface{} {
	return &GetWebsiteResult{}
}

type GetWebsiteArgs struct {
	Req *dash.GetWebsiteRequest
}

func (p *GetWebsiteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.GetWebsiteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetWebsiteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetWebsiteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetWebsiteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetWebsiteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetWebsiteArgs) Unmarshal(in []byte) error {
	msg := new(dash.GetWebsiteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetWebsiteArgs_Req_DEFAULT *dash.GetWebsiteRequest

func (p *GetWebsiteArgs) GetReq() *dash.GetWebsiteRequest {
	if !p.IsSetReq() {
		return GetWebsiteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetWebsiteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetWebsiteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetWebsiteResult struct {
	Success *dash.GetWebsiteResponse
}

var GetWebsiteResult_Success_DEFAULT *dash.GetWebsiteResponse

func (p *GetWebsiteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.GetWebsiteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetWebsiteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetWebsiteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetWebsiteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetWebsiteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetWebsiteResult) Unmarshal(in []byte) error {
	msg := new(dash.GetWebsiteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetWebsiteResult) GetSuccess() *dash.GetWebsiteResponse {
	if !p.IsSetSuccess() {
		return GetWebsiteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetWebsiteResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.GetWebsiteResponse)
}

func (p *GetWebsiteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetWebsiteResult) GetResult() interface{} {
	return p.Success
}

func updateWebsiteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.UpdateWebsiteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.WebsiteService).UpdateWebsite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateWebsiteArgs:
		success, err := handler.(dash.WebsiteService).UpdateWebsite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateWebsiteResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateWebsiteArgs() interface{} {
	return &UpdateWebsiteArgs{}
}

func newUpdateWebsiteResult() interface{} {
	return &UpdateWebsiteResult{}
}

type UpdateWebsiteArgs struct {
	Req *dash.UpdateWebsiteRequest
}

func (p *UpdateWebsiteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.UpdateWebsiteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateWebsiteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateWebsiteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateWebsiteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateWebsiteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateWebsiteArgs) Unmarshal(in []byte) error {
	msg := new(dash.UpdateWebsiteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateWebsiteArgs_Req_DEFAULT *dash.UpdateWebsiteRequest

func (p *UpdateWebsiteArgs) GetReq() *dash.UpdateWebsiteRequest {
	if !p.IsSetReq() {
		return UpdateWebsiteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateWebsiteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateWebsiteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateWebsiteResult struct {
	Success *base.Empty
}

var UpdateWebsiteResult_Success_DEFAULT *base.Empty

func (p *UpdateWebsiteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(base.Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateWebsiteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateWebsiteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateWebsiteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateWebsiteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateWebsiteResult) Unmarshal(in []byte) error {
	msg := new(base.Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateWebsiteResult) GetSuccess() *base.Empty {
	if !p.IsSetSuccess() {
		return UpdateWebsiteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateWebsiteResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

func (p *UpdateWebsiteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateWebsiteResult) GetResult() interface{} {
	return p.Success
}

func listWebsitesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.ListWebsitesRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.WebsiteService).ListWebsites(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListWebsitesArgs:
		success, err := handler.(dash.WebsiteService).ListWebsites(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListWebsitesResult)
		realResult.Success = success
	}
	return nil
}
func newListWebsitesArgs() interface{} {
	return &ListWebsitesArgs{}
}

func newListWebsitesResult() interface{} {
	return &ListWebsitesResult{}
}

type ListWebsitesArgs struct {
	Req *dash.ListWebsitesRequest
}

func (p *ListWebsitesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.ListWebsitesRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListWebsitesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListWebsitesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListWebsitesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListWebsitesArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListWebsitesArgs) Unmarshal(in []byte) error {
	msg := new(dash.ListWebsitesRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListWebsitesArgs_Req_DEFAULT *dash.ListWebsitesRequest

func (p *ListWebsitesArgs) GetReq() *dash.ListWebsitesRequest {
	if !p.IsSetReq() {
		return ListWebsitesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListWebsitesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListWebsitesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListWebsitesResult struct {
	Success *dash.ListWebsitesResponse
}

var ListWebsitesResult_Success_DEFAULT *dash.ListWebsitesResponse

func (p *ListWebsitesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.ListWebsitesResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListWebsitesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListWebsitesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListWebsitesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListWebsitesResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListWebsitesResult) Unmarshal(in []byte) error {
	msg := new(dash.ListWebsitesResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListWebsitesResult) GetSuccess() *dash.ListWebsitesResponse {
	if !p.IsSetSuccess() {
		return ListWebsitesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListWebsitesResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.ListWebsitesResponse)
}

func (p *ListWebsitesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListWebsitesResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateWebsite(ctx context.Context, Req *dash.CreateWebsiteRequest) (r *dash.CreateWebsiteResponse, err error) {
	var _args CreateWebsiteArgs
	_args.Req = Req
	var _result CreateWebsiteResult
	if err = p.c.Call(ctx, "CreateWebsite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetWebsite(ctx context.Context, Req *dash.GetWebsiteRequest) (r *dash.GetWebsiteResponse, err error) {
	var _args GetWebsiteArgs
	_args.Req = Req
	var _result GetWebsiteResult
	if err = p.c.Call(ctx, "GetWebsite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateWebsite(ctx context.Context, Req *dash.UpdateWebsiteRequest) (r *base.Empty, err error) {
	var _args UpdateWebsiteArgs
	_args.Req = Req
	var _result UpdateWebsiteResult
	if err = p.c.Call(ctx, "UpdateWebsite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListWebsites(ctx context.Context, Req *dash.ListWebsitesRequest) (r *dash.ListWebsitesResponse, err error) {
	var _args ListWebsitesArgs
	_args.Req = Req
	var _result ListWebsitesResult
	if err = p.c.Call(ctx, "ListWebsites", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
