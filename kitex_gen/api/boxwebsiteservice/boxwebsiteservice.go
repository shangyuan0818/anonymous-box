// Code generated by Kitex v0.5.1. DO NOT EDIT.

package boxwebsiteservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	api "github.com/star-horizon/anonymous-box-saas/kitex_gen/api"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return boxWebsiteServiceServiceInfo
}

var boxWebsiteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BoxWebsiteService"
	handlerType := (*api.BoxWebsiteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetWebsite": kitex.NewMethodInfo(getWebsiteHandler, newGetWebsiteArgs, newGetWebsiteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func getWebsiteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.GetWebsiteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.BoxWebsiteService).GetWebsite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetWebsiteArgs:
		success, err := handler.(api.BoxWebsiteService).GetWebsite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetWebsiteResult)
		realResult.Success = success
	}
	return nil
}
func newGetWebsiteArgs() interface{} {
	return &GetWebsiteArgs{}
}

func newGetWebsiteResult() interface{} {
	return &GetWebsiteResult{}
}

type GetWebsiteArgs struct {
	Req *api.GetWebsiteRequest
}

func (p *GetWebsiteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.GetWebsiteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetWebsiteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetWebsiteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetWebsiteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetWebsiteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetWebsiteArgs) Unmarshal(in []byte) error {
	msg := new(api.GetWebsiteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetWebsiteArgs_Req_DEFAULT *api.GetWebsiteRequest

func (p *GetWebsiteArgs) GetReq() *api.GetWebsiteRequest {
	if !p.IsSetReq() {
		return GetWebsiteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetWebsiteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetWebsiteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetWebsiteResult struct {
	Success *api.GetWebsiteResponse
}

var GetWebsiteResult_Success_DEFAULT *api.GetWebsiteResponse

func (p *GetWebsiteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.GetWebsiteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetWebsiteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetWebsiteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetWebsiteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetWebsiteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetWebsiteResult) Unmarshal(in []byte) error {
	msg := new(api.GetWebsiteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetWebsiteResult) GetSuccess() *api.GetWebsiteResponse {
	if !p.IsSetSuccess() {
		return GetWebsiteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetWebsiteResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.GetWebsiteResponse)
}

func (p *GetWebsiteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetWebsiteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetWebsite(ctx context.Context, Req *api.GetWebsiteRequest) (r *api.GetWebsiteResponse, err error) {
	var _args GetWebsiteArgs
	_args.Req = Req
	var _result GetWebsiteResult
	if err = p.c.Call(ctx, "GetWebsite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
