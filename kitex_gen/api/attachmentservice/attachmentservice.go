// Code generated by Kitex v0.5.1. DO NOT EDIT.

package attachmentservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	api "github.com/star-horizon/anonymous-box-saas/kitex_gen/api"
	base "github.com/star-horizon/anonymous-box-saas/kitex_gen/base"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return attachmentServiceServiceInfo
}

var attachmentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AttachmentService"
	handlerType := (*api.AttachmentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RequestAttachmentUpload": kitex.NewMethodInfo(requestAttachmentUploadHandler, newRequestAttachmentUploadArgs, newRequestAttachmentUploadResult, false),
		"UploadAttachment":        kitex.NewMethodInfo(uploadAttachmentHandler, newUploadAttachmentArgs, newUploadAttachmentResult, false),
		"GetAttachment":           kitex.NewMethodInfo(getAttachmentHandler, newGetAttachmentArgs, newGetAttachmentResult, false),
		"DeleteAttachment":        kitex.NewMethodInfo(deleteAttachmentHandler, newDeleteAttachmentArgs, newDeleteAttachmentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api.dash",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func requestAttachmentUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.RequestAttachmentUploadRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AttachmentService).RequestAttachmentUpload(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RequestAttachmentUploadArgs:
		success, err := handler.(api.AttachmentService).RequestAttachmentUpload(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RequestAttachmentUploadResult)
		realResult.Success = success
	}
	return nil
}
func newRequestAttachmentUploadArgs() interface{} {
	return &RequestAttachmentUploadArgs{}
}

func newRequestAttachmentUploadResult() interface{} {
	return &RequestAttachmentUploadResult{}
}

type RequestAttachmentUploadArgs struct {
	Req *api.RequestAttachmentUploadRequest
}

func (p *RequestAttachmentUploadArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.RequestAttachmentUploadRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RequestAttachmentUploadArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RequestAttachmentUploadArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RequestAttachmentUploadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RequestAttachmentUploadArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RequestAttachmentUploadArgs) Unmarshal(in []byte) error {
	msg := new(api.RequestAttachmentUploadRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RequestAttachmentUploadArgs_Req_DEFAULT *api.RequestAttachmentUploadRequest

func (p *RequestAttachmentUploadArgs) GetReq() *api.RequestAttachmentUploadRequest {
	if !p.IsSetReq() {
		return RequestAttachmentUploadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RequestAttachmentUploadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RequestAttachmentUploadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RequestAttachmentUploadResult struct {
	Success *api.RequestAttachmentUploadResponse
}

var RequestAttachmentUploadResult_Success_DEFAULT *api.RequestAttachmentUploadResponse

func (p *RequestAttachmentUploadResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.RequestAttachmentUploadResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RequestAttachmentUploadResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RequestAttachmentUploadResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RequestAttachmentUploadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RequestAttachmentUploadResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RequestAttachmentUploadResult) Unmarshal(in []byte) error {
	msg := new(api.RequestAttachmentUploadResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RequestAttachmentUploadResult) GetSuccess() *api.RequestAttachmentUploadResponse {
	if !p.IsSetSuccess() {
		return RequestAttachmentUploadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RequestAttachmentUploadResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.RequestAttachmentUploadResponse)
}

func (p *RequestAttachmentUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RequestAttachmentUploadResult) GetResult() interface{} {
	return p.Success
}

func uploadAttachmentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &attachmentServiceUploadAttachmentServer{st}
	return handler.(api.AttachmentService).UploadAttachment(stream)
}

type attachmentServiceUploadAttachmentClient struct {
	streaming.Stream
}

func (x *attachmentServiceUploadAttachmentClient) Send(m *api.UploadAttachmentRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *attachmentServiceUploadAttachmentClient) CloseAndRecv() (*api.UploadAttachmentResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(api.UploadAttachmentResponse)
	return m, x.Stream.RecvMsg(m)
}

type attachmentServiceUploadAttachmentServer struct {
	streaming.Stream
}

func (x *attachmentServiceUploadAttachmentServer) SendAndClose(m *api.UploadAttachmentResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *attachmentServiceUploadAttachmentServer) Recv() (*api.UploadAttachmentRequest, error) {
	m := new(api.UploadAttachmentRequest)
	return m, x.Stream.RecvMsg(m)
}

func newUploadAttachmentArgs() interface{} {
	return &UploadAttachmentArgs{}
}

func newUploadAttachmentResult() interface{} {
	return &UploadAttachmentResult{}
}

type UploadAttachmentArgs struct {
	Req *api.UploadAttachmentRequest
}

func (p *UploadAttachmentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.UploadAttachmentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UploadAttachmentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UploadAttachmentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UploadAttachmentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UploadAttachmentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UploadAttachmentArgs) Unmarshal(in []byte) error {
	msg := new(api.UploadAttachmentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UploadAttachmentArgs_Req_DEFAULT *api.UploadAttachmentRequest

func (p *UploadAttachmentArgs) GetReq() *api.UploadAttachmentRequest {
	if !p.IsSetReq() {
		return UploadAttachmentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UploadAttachmentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadAttachmentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UploadAttachmentResult struct {
	Success *api.UploadAttachmentResponse
}

var UploadAttachmentResult_Success_DEFAULT *api.UploadAttachmentResponse

func (p *UploadAttachmentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.UploadAttachmentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UploadAttachmentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UploadAttachmentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UploadAttachmentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UploadAttachmentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UploadAttachmentResult) Unmarshal(in []byte) error {
	msg := new(api.UploadAttachmentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UploadAttachmentResult) GetSuccess() *api.UploadAttachmentResponse {
	if !p.IsSetSuccess() {
		return UploadAttachmentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UploadAttachmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.UploadAttachmentResponse)
}

func (p *UploadAttachmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadAttachmentResult) GetResult() interface{} {
	return p.Success
}

func getAttachmentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.GetAttachmentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AttachmentService).GetAttachment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAttachmentArgs:
		success, err := handler.(api.AttachmentService).GetAttachment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAttachmentResult)
		realResult.Success = success
	}
	return nil
}
func newGetAttachmentArgs() interface{} {
	return &GetAttachmentArgs{}
}

func newGetAttachmentResult() interface{} {
	return &GetAttachmentResult{}
}

type GetAttachmentArgs struct {
	Req *api.GetAttachmentRequest
}

func (p *GetAttachmentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.GetAttachmentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAttachmentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAttachmentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAttachmentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAttachmentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAttachmentArgs) Unmarshal(in []byte) error {
	msg := new(api.GetAttachmentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAttachmentArgs_Req_DEFAULT *api.GetAttachmentRequest

func (p *GetAttachmentArgs) GetReq() *api.GetAttachmentRequest {
	if !p.IsSetReq() {
		return GetAttachmentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAttachmentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAttachmentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAttachmentResult struct {
	Success *api.GetAttachmentResponse
}

var GetAttachmentResult_Success_DEFAULT *api.GetAttachmentResponse

func (p *GetAttachmentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.GetAttachmentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAttachmentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAttachmentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAttachmentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAttachmentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAttachmentResult) Unmarshal(in []byte) error {
	msg := new(api.GetAttachmentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAttachmentResult) GetSuccess() *api.GetAttachmentResponse {
	if !p.IsSetSuccess() {
		return GetAttachmentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAttachmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.GetAttachmentResponse)
}

func (p *GetAttachmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAttachmentResult) GetResult() interface{} {
	return p.Success
}

func deleteAttachmentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DeleteAttachmentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AttachmentService).DeleteAttachment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteAttachmentArgs:
		success, err := handler.(api.AttachmentService).DeleteAttachment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteAttachmentResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteAttachmentArgs() interface{} {
	return &DeleteAttachmentArgs{}
}

func newDeleteAttachmentResult() interface{} {
	return &DeleteAttachmentResult{}
}

type DeleteAttachmentArgs struct {
	Req *api.DeleteAttachmentRequest
}

func (p *DeleteAttachmentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DeleteAttachmentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteAttachmentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteAttachmentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteAttachmentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteAttachmentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteAttachmentArgs) Unmarshal(in []byte) error {
	msg := new(api.DeleteAttachmentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteAttachmentArgs_Req_DEFAULT *api.DeleteAttachmentRequest

func (p *DeleteAttachmentArgs) GetReq() *api.DeleteAttachmentRequest {
	if !p.IsSetReq() {
		return DeleteAttachmentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteAttachmentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteAttachmentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteAttachmentResult struct {
	Success *base.Empty
}

var DeleteAttachmentResult_Success_DEFAULT *base.Empty

func (p *DeleteAttachmentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(base.Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteAttachmentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteAttachmentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteAttachmentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteAttachmentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteAttachmentResult) Unmarshal(in []byte) error {
	msg := new(base.Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteAttachmentResult) GetSuccess() *base.Empty {
	if !p.IsSetSuccess() {
		return DeleteAttachmentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteAttachmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

func (p *DeleteAttachmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteAttachmentResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RequestAttachmentUpload(ctx context.Context, Req *api.RequestAttachmentUploadRequest) (r *api.RequestAttachmentUploadResponse, err error) {
	var _args RequestAttachmentUploadArgs
	_args.Req = Req
	var _result RequestAttachmentUploadResult
	if err = p.c.Call(ctx, "RequestAttachmentUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadAttachment(ctx context.Context) (AttachmentService_UploadAttachmentClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "UploadAttachment", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &attachmentServiceUploadAttachmentClient{res.Stream}
	return stream, nil
}

func (p *kClient) GetAttachment(ctx context.Context, Req *api.GetAttachmentRequest) (r *api.GetAttachmentResponse, err error) {
	var _args GetAttachmentArgs
	_args.Req = Req
	var _result GetAttachmentResult
	if err = p.c.Call(ctx, "GetAttachment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAttachment(ctx context.Context, Req *api.DeleteAttachmentRequest) (r *base.Empty, err error) {
	var _args DeleteAttachmentArgs
	_args.Req = Req
	var _result DeleteAttachmentResult
	if err = p.c.Call(ctx, "DeleteAttachment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
