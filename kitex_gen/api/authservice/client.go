// Code generated by Kitex v0.5.1. DO NOT EDIT.

package authservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	api "github.com/star-horizon/anonymous-box-saas/kitex_gen/api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Auth(ctx context.Context, Req *api.AuthRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error)
	Register(ctx context.Context, Req *api.RegisterRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error)
	ChangePassword(ctx context.Context, Req *api.ChangePasswordRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error)
	ResetPassword(ctx context.Context, Req *api.ResetPasswordRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error)
	GetServerAuthData(ctx context.Context, Req *api.AuthToken, callOptions ...callopt.Option) (r *api.ServerAuthDataResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAuthServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAuthServiceClient struct {
	*kClient
}

func (p *kAuthServiceClient) Auth(ctx context.Context, Req *api.AuthRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Auth(ctx, Req)
}

func (p *kAuthServiceClient) Register(ctx context.Context, Req *api.RegisterRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kAuthServiceClient) ChangePassword(ctx context.Context, Req *api.ChangePasswordRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangePassword(ctx, Req)
}

func (p *kAuthServiceClient) ResetPassword(ctx context.Context, Req *api.ResetPasswordRequest, callOptions ...callopt.Option) (r *api.AuthToken, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ResetPassword(ctx, Req)
}

func (p *kAuthServiceClient) GetServerAuthData(ctx context.Context, Req *api.AuthToken, callOptions ...callopt.Option) (r *api.ServerAuthDataResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetServerAuthData(ctx, Req)
}
