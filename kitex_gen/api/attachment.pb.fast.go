// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "github.com/star-horizon/anonymous-box-saas/kitex_gen/base"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *RequestAttachmentUploadRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RequestAttachmentUploadRequest[number], err)
}

func (x *RequestAttachmentUploadRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RequestAttachmentUploadRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RequestAttachmentUploadRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RequestAttachmentUploadRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Size, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RequestAttachmentUploadResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RequestAttachmentUploadResponse[number], err)
}

func (x *RequestAttachmentUploadResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *RequestAttachmentUploadResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v base.Timestamp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ExpiresAt = &v
	return offset, nil
}

func (x *RequestAttachmentUploadResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UploadToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadAttachmentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadAttachmentRequest[number], err)
}

func (x *UploadAttachmentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UploadToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadAttachmentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *UploadAttachmentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadAttachmentResponse[number], err)
}

func (x *UploadAttachmentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UploadAttachmentResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAttachmentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAttachmentRequest[number], err)
}

func (x *GetAttachmentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAttachmentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetAttachmentRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Ip, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAttachmentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAttachmentResponse[number], err)
}

func (x *GetAttachmentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetAttachmentResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAttachmentResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAttachmentResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Size, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetAttachmentResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteAttachmentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteAttachmentRequest[number], err)
}

func (x *DeleteAttachmentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteAttachmentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *RequestAttachmentUploadRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *RequestAttachmentUploadRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *RequestAttachmentUploadRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *RequestAttachmentUploadRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetType())
	return offset
}

func (x *RequestAttachmentUploadRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Size == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetSize())
	return offset
}

func (x *RequestAttachmentUploadResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *RequestAttachmentUploadResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RequestAttachmentUploadResponse) fastWriteField2(buf []byte) (offset int) {
	if x.ExpiresAt == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetExpiresAt())
	return offset
}

func (x *RequestAttachmentUploadResponse) fastWriteField3(buf []byte) (offset int) {
	if x.UploadToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUploadToken())
	return offset
}

func (x *UploadAttachmentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UploadAttachmentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UploadToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUploadToken())
	return offset
}

func (x *UploadAttachmentRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Content) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetContent())
	return offset
}

func (x *UploadAttachmentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UploadAttachmentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UploadAttachmentResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *GetAttachmentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetAttachmentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *GetAttachmentRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetId())
	return offset
}

func (x *GetAttachmentRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Ip == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetIp())
	return offset
}

func (x *GetAttachmentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetAttachmentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetAttachmentResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *GetAttachmentResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetType())
	return offset
}

func (x *GetAttachmentResponse) fastWriteField4(buf []byte) (offset int) {
	if x.Size == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetSize())
	return offset
}

func (x *GetAttachmentResponse) fastWriteField5(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetUrl())
	return offset
}

func (x *DeleteAttachmentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteAttachmentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *DeleteAttachmentRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetId())
	return offset
}

func (x *RequestAttachmentUploadRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *RequestAttachmentUploadRequest) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *RequestAttachmentUploadRequest) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *RequestAttachmentUploadRequest) sizeField3() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetType())
	return n
}

func (x *RequestAttachmentUploadRequest) sizeField4() (n int) {
	if x.Size == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetSize())
	return n
}

func (x *RequestAttachmentUploadResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *RequestAttachmentUploadResponse) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *RequestAttachmentUploadResponse) sizeField2() (n int) {
	if x.ExpiresAt == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetExpiresAt())
	return n
}

func (x *RequestAttachmentUploadResponse) sizeField3() (n int) {
	if x.UploadToken == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUploadToken())
	return n
}

func (x *UploadAttachmentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UploadAttachmentRequest) sizeField1() (n int) {
	if x.UploadToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUploadToken())
	return n
}

func (x *UploadAttachmentRequest) sizeField2() (n int) {
	if len(x.Content) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetContent())
	return n
}

func (x *UploadAttachmentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UploadAttachmentResponse) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *UploadAttachmentResponse) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *GetAttachmentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetAttachmentRequest) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *GetAttachmentRequest) sizeField2() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetId())
	return n
}

func (x *GetAttachmentRequest) sizeField3() (n int) {
	if x.Ip == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetIp())
	return n
}

func (x *GetAttachmentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetAttachmentResponse) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *GetAttachmentResponse) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *GetAttachmentResponse) sizeField3() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetType())
	return n
}

func (x *GetAttachmentResponse) sizeField4() (n int) {
	if x.Size == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetSize())
	return n
}

func (x *GetAttachmentResponse) sizeField5() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetUrl())
	return n
}

func (x *DeleteAttachmentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteAttachmentRequest) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *DeleteAttachmentRequest) sizeField2() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetId())
	return n
}

var fieldIDToName_RequestAttachmentUploadRequest = map[int32]string{
	1: "Token",
	2: "Name",
	3: "Type",
	4: "Size",
}

var fieldIDToName_RequestAttachmentUploadResponse = map[int32]string{
	1: "Id",
	2: "ExpiresAt",
	3: "UploadToken",
}

var fieldIDToName_UploadAttachmentRequest = map[int32]string{
	1: "UploadToken",
	2: "Content",
}

var fieldIDToName_UploadAttachmentResponse = map[int32]string{
	1: "Id",
	2: "Url",
}

var fieldIDToName_GetAttachmentRequest = map[int32]string{
	1: "Token",
	2: "Id",
	3: "Ip",
}

var fieldIDToName_GetAttachmentResponse = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Type",
	4: "Size",
	5: "Url",
}

var fieldIDToName_DeleteAttachmentRequest = map[int32]string{
	1: "Token",
	2: "Id",
}

var _ = base.File_idl_base_empty_proto
var _ = base.File_idl_base_timestamp_proto
