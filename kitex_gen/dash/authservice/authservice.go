// Code generated by Kitex v0.5.1. DO NOT EDIT.

package authservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	dash "github.com/star-horizon/anonymous-box-saas/kitex_gen/dash"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

var authServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*dash.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UsernameLogin":     kitex.NewMethodInfo(usernameLoginHandler, newUsernameLoginArgs, newUsernameLoginResult, false),
		"EmailLogin":        kitex.NewMethodInfo(emailLoginHandler, newEmailLoginArgs, newEmailLoginResult, false),
		"Register":          kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
		"ChangePassword":    kitex.NewMethodInfo(changePasswordHandler, newChangePasswordArgs, newChangePasswordResult, false),
		"ResetPassword":     kitex.NewMethodInfo(resetPasswordHandler, newResetPasswordArgs, newResetPasswordResult, false),
		"GetServerAuthData": kitex.NewMethodInfo(getServerAuthDataHandler, newGetServerAuthDataArgs, newGetServerAuthDataResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api.dash",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func usernameLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.UsernameLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.AuthService).UsernameLogin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UsernameLoginArgs:
		success, err := handler.(dash.AuthService).UsernameLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UsernameLoginResult)
		realResult.Success = success
	}
	return nil
}
func newUsernameLoginArgs() interface{} {
	return &UsernameLoginArgs{}
}

func newUsernameLoginResult() interface{} {
	return &UsernameLoginResult{}
}

type UsernameLoginArgs struct {
	Req *dash.UsernameLoginRequest
}

func (p *UsernameLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.UsernameLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UsernameLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UsernameLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UsernameLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UsernameLoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UsernameLoginArgs) Unmarshal(in []byte) error {
	msg := new(dash.UsernameLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UsernameLoginArgs_Req_DEFAULT *dash.UsernameLoginRequest

func (p *UsernameLoginArgs) GetReq() *dash.UsernameLoginRequest {
	if !p.IsSetReq() {
		return UsernameLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UsernameLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UsernameLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UsernameLoginResult struct {
	Success *dash.AuthToken
}

var UsernameLoginResult_Success_DEFAULT *dash.AuthToken

func (p *UsernameLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.AuthToken)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UsernameLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UsernameLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UsernameLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UsernameLoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UsernameLoginResult) Unmarshal(in []byte) error {
	msg := new(dash.AuthToken)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UsernameLoginResult) GetSuccess() *dash.AuthToken {
	if !p.IsSetSuccess() {
		return UsernameLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UsernameLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.AuthToken)
}

func (p *UsernameLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UsernameLoginResult) GetResult() interface{} {
	return p.Success
}

func emailLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.EmailLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.AuthService).EmailLogin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *EmailLoginArgs:
		success, err := handler.(dash.AuthService).EmailLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EmailLoginResult)
		realResult.Success = success
	}
	return nil
}
func newEmailLoginArgs() interface{} {
	return &EmailLoginArgs{}
}

func newEmailLoginResult() interface{} {
	return &EmailLoginResult{}
}

type EmailLoginArgs struct {
	Req *dash.EmailLoginRequest
}

func (p *EmailLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.EmailLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EmailLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EmailLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EmailLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in EmailLoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *EmailLoginArgs) Unmarshal(in []byte) error {
	msg := new(dash.EmailLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EmailLoginArgs_Req_DEFAULT *dash.EmailLoginRequest

func (p *EmailLoginArgs) GetReq() *dash.EmailLoginRequest {
	if !p.IsSetReq() {
		return EmailLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EmailLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmailLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EmailLoginResult struct {
	Success *dash.AuthToken
}

var EmailLoginResult_Success_DEFAULT *dash.AuthToken

func (p *EmailLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.AuthToken)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EmailLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EmailLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EmailLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in EmailLoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *EmailLoginResult) Unmarshal(in []byte) error {
	msg := new(dash.AuthToken)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EmailLoginResult) GetSuccess() *dash.AuthToken {
	if !p.IsSetSuccess() {
		return EmailLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EmailLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.AuthToken)
}

func (p *EmailLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailLoginResult) GetResult() interface{} {
	return p.Success
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.RegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.AuthService).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(dash.AuthService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *dash.RegisterRequest
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.RegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(dash.RegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *dash.RegisterRequest

func (p *RegisterArgs) GetReq() *dash.RegisterRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterResult struct {
	Success *dash.AuthToken
}

var RegisterResult_Success_DEFAULT *dash.AuthToken

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.AuthToken)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(dash.AuthToken)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *dash.AuthToken {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.AuthToken)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterResult) GetResult() interface{} {
	return p.Success
}

func changePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.ChangePasswordRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.AuthService).ChangePassword(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ChangePasswordArgs:
		success, err := handler.(dash.AuthService).ChangePassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChangePasswordResult)
		realResult.Success = success
	}
	return nil
}
func newChangePasswordArgs() interface{} {
	return &ChangePasswordArgs{}
}

func newChangePasswordResult() interface{} {
	return &ChangePasswordResult{}
}

type ChangePasswordArgs struct {
	Req *dash.ChangePasswordRequest
}

func (p *ChangePasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.ChangePasswordRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChangePasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChangePasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChangePasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ChangePasswordArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ChangePasswordArgs) Unmarshal(in []byte) error {
	msg := new(dash.ChangePasswordRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChangePasswordArgs_Req_DEFAULT *dash.ChangePasswordRequest

func (p *ChangePasswordArgs) GetReq() *dash.ChangePasswordRequest {
	if !p.IsSetReq() {
		return ChangePasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChangePasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChangePasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ChangePasswordResult struct {
	Success *dash.AuthToken
}

var ChangePasswordResult_Success_DEFAULT *dash.AuthToken

func (p *ChangePasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.AuthToken)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChangePasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChangePasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChangePasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ChangePasswordResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ChangePasswordResult) Unmarshal(in []byte) error {
	msg := new(dash.AuthToken)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChangePasswordResult) GetSuccess() *dash.AuthToken {
	if !p.IsSetSuccess() {
		return ChangePasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChangePasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.AuthToken)
}

func (p *ChangePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChangePasswordResult) GetResult() interface{} {
	return p.Success
}

func resetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.ResetPasswordRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.AuthService).ResetPassword(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ResetPasswordArgs:
		success, err := handler.(dash.AuthService).ResetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ResetPasswordResult)
		realResult.Success = success
	}
	return nil
}
func newResetPasswordArgs() interface{} {
	return &ResetPasswordArgs{}
}

func newResetPasswordResult() interface{} {
	return &ResetPasswordResult{}
}

type ResetPasswordArgs struct {
	Req *dash.ResetPasswordRequest
}

func (p *ResetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.ResetPasswordRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ResetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ResetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ResetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ResetPasswordArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ResetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(dash.ResetPasswordRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ResetPasswordArgs_Req_DEFAULT *dash.ResetPasswordRequest

func (p *ResetPasswordArgs) GetReq() *dash.ResetPasswordRequest {
	if !p.IsSetReq() {
		return ResetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ResetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ResetPasswordResult struct {
	Success *dash.AuthToken
}

var ResetPasswordResult_Success_DEFAULT *dash.AuthToken

func (p *ResetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.AuthToken)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ResetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ResetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ResetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ResetPasswordResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ResetPasswordResult) Unmarshal(in []byte) error {
	msg := new(dash.AuthToken)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ResetPasswordResult) GetSuccess() *dash.AuthToken {
	if !p.IsSetSuccess() {
		return ResetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ResetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.AuthToken)
}

func (p *ResetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResetPasswordResult) GetResult() interface{} {
	return p.Success
}

func getServerAuthDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(dash.AuthToken)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(dash.AuthService).GetServerAuthData(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetServerAuthDataArgs:
		success, err := handler.(dash.AuthService).GetServerAuthData(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetServerAuthDataResult)
		realResult.Success = success
	}
	return nil
}
func newGetServerAuthDataArgs() interface{} {
	return &GetServerAuthDataArgs{}
}

func newGetServerAuthDataResult() interface{} {
	return &GetServerAuthDataResult{}
}

type GetServerAuthDataArgs struct {
	Req *dash.AuthToken
}

func (p *GetServerAuthDataArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(dash.AuthToken)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetServerAuthDataArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetServerAuthDataArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetServerAuthDataArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetServerAuthDataArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetServerAuthDataArgs) Unmarshal(in []byte) error {
	msg := new(dash.AuthToken)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetServerAuthDataArgs_Req_DEFAULT *dash.AuthToken

func (p *GetServerAuthDataArgs) GetReq() *dash.AuthToken {
	if !p.IsSetReq() {
		return GetServerAuthDataArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetServerAuthDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetServerAuthDataArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetServerAuthDataResult struct {
	Success *dash.ServerAuthDataResponse
}

var GetServerAuthDataResult_Success_DEFAULT *dash.ServerAuthDataResponse

func (p *GetServerAuthDataResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(dash.ServerAuthDataResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetServerAuthDataResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetServerAuthDataResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetServerAuthDataResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetServerAuthDataResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetServerAuthDataResult) Unmarshal(in []byte) error {
	msg := new(dash.ServerAuthDataResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetServerAuthDataResult) GetSuccess() *dash.ServerAuthDataResponse {
	if !p.IsSetSuccess() {
		return GetServerAuthDataResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetServerAuthDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*dash.ServerAuthDataResponse)
}

func (p *GetServerAuthDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetServerAuthDataResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UsernameLogin(ctx context.Context, Req *dash.UsernameLoginRequest) (r *dash.AuthToken, err error) {
	var _args UsernameLoginArgs
	_args.Req = Req
	var _result UsernameLoginResult
	if err = p.c.Call(ctx, "UsernameLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EmailLogin(ctx context.Context, Req *dash.EmailLoginRequest) (r *dash.AuthToken, err error) {
	var _args EmailLoginArgs
	_args.Req = Req
	var _result EmailLoginResult
	if err = p.c.Call(ctx, "EmailLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, Req *dash.RegisterRequest) (r *dash.AuthToken, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangePassword(ctx context.Context, Req *dash.ChangePasswordRequest) (r *dash.AuthToken, err error) {
	var _args ChangePasswordArgs
	_args.Req = Req
	var _result ChangePasswordResult
	if err = p.c.Call(ctx, "ChangePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetPassword(ctx context.Context, Req *dash.ResetPasswordRequest) (r *dash.AuthToken, err error) {
	var _args ResetPasswordArgs
	_args.Req = Req
	var _result ResetPasswordResult
	if err = p.c.Call(ctx, "ResetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetServerAuthData(ctx context.Context, Req *dash.AuthToken) (r *dash.ServerAuthDataResponse, err error) {
	var _args GetServerAuthDataArgs
	_args.Req = Req
	var _result GetServerAuthDataResult
	if err = p.c.Call(ctx, "GetServerAuthData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
